#version 460

#include "Common.glsl"

// we max keep 128 cascade.
#define WORK_SIZE MAX_CASCADE_COUNT

#include "SDSMCommon.glsl"

#define FRAME_DATA_SET 0
#include "FrameData.glsl"

#define VIEW_DATA_SET 1
#include "ViewData.glsl"

layout(set = 2, binding = 0) buffer inDepthBufferRange
{
    DepthRange range;
};

layout(set = 3, binding = 0) buffer outCascadeInfoBuffer
{
    CascadeInfo cascadeInfos[];
};

// sampler hiz.

layout(set = 4, binding = 0) uniform sampler2D inHiz; // point clamp sampler

struct PushConstantsData
{
    uint bFixCascade;
    uint hizLastMipLevels;

    uint cascadeCount;
    uint perCascadeXYDim;

    float farShadowPos;
    float splitLambda;
};

layout(push_constant) uniform inPushConstantsData
{
    PushConstantsData pushConstant;
};

vec2 sampleMinMax()
{
    return textureLod(inHiz, vec2(0.5f), pushConstant.hizLastMipLevels).xy;
}

float logCascadeSplit(in const float nearZ, in const float maxDepthLinear, in const float minDepthLinear, in const float clipRange, in const uint cascadeId)
{
    const float lambda = pushConstant.splitLambda;

    float range = maxDepthLinear - minDepthLinear;
    float ratio = maxDepthLinear / minDepthLinear;

    // get current part factor.
    float p = float(cascadeId + 1) / float(pushConstant.cascadeCount);

    // get log scale factor and uniform scale factor.
    float logScale = minDepthLinear * pow(abs(ratio), p);
    float uniformScale = minDepthLinear + range * p;

    // final get split distance.
    float d = lambda * (logScale - uniformScale) + uniformScale;
    return (d - nearZ) / clipRange;
}

layout(local_size_x = WORK_SIZE) in;
void main()
{
    const uint idx = gl_GlobalInvocationID.x;

    // skip max cascade count.
    if(idx >= pushConstant.cascadeCount)
    {
        return;
    }

    // uncode to original depth.
    const float minDepthFloat = float(range.minDepth) / DEPTH_SCALE_FLOAT;
    const float maxDepthFloat = float(range.maxDepth) / DEPTH_SCALE_FLOAT;

    // camera info get.
    const float nearZ = viewData.camInfo.z;
    const float farZ  = viewData.camInfo.w;

    // get linear depth infos.
    float minDepthLinear = linearizeDepth(maxDepthFloat, nearZ, farZ); // we reverse z, so max float is near plane, min float is far plane.
    float maxDepthLinear = linearizeDepth(minDepthFloat, nearZ, farZ);
    // clamp to config.
    maxDepthLinear = min(maxDepthLinear, pushConstant.farShadowPos); 

    // if use fix cascade, we
    if(pushConstant.bFixCascade != 0)
    {
        minDepthLinear = nearZ;
        maxDepthLinear = min(pushConstant.farShadowPos, farZ);
    }

    // get depth start end pos.
    const float clipRange = farZ - nearZ;
    float depthStartPos = clamp((minDepthLinear - nearZ) / clipRange, .0f, 1.f);
    float depthEndPos   = clamp((maxDepthLinear - nearZ) / clipRange, .0f, 1.f);

    // log style cascade split.
    float cascadeSpit[2];
    {
        // current split.
        cascadeSpit[1] = logCascadeSplit(nearZ, maxDepthLinear, minDepthLinear, clipRange, idx);

        // prev split.
        cascadeSpit[0] = logCascadeSplit(nearZ, maxDepthLinear, minDepthLinear, clipRange, idx - 1);
    }

    // now setup each cascade frustum corners.
    vec3 frustumCornersWS[8];
    frustumCornersWS[0] = vec3(-1.0f,  1.0f, 1.0f);
    frustumCornersWS[1] = vec3( 1.0f,  1.0f, 1.0f);
    frustumCornersWS[2] = vec3( 1.0f, -1.0f, 1.0f);
    frustumCornersWS[3] = vec3(-1.0f, -1.0f, 1.0f);
    frustumCornersWS[4] = vec3(-1.0f,  1.0f, 0.0f);
    frustumCornersWS[5] = vec3( 1.0f,  1.0f, 0.0f);
    frustumCornersWS[6] = vec3( 1.0f, -1.0f, 0.0f);
    frustumCornersWS[7] = vec3(-1.0f, -1.0f, 0.0f);
    for(uint i = 0; i < 8; i ++)
    {
        vec4 invCorner = viewData.camInvertViewProjectionJitter * vec4(frustumCornersWS[i], 1.0f);
        frustumCornersWS[i] = invCorner.xyz / invCorner.w;
    }

    float prevSplitDist = idx == 0 ? depthStartPos : cascadeSpit[0];
    float splitDist = cascadeSpit[1];

    // calculate 4 corner world pos of cascade view frustum.
    for(uint i = 0; i < 4; i ++)
    {
        vec3 cornerRay = frustumCornersWS[i + 4] - frustumCornersWS[i]; // distance ray.

        vec3 nearCornerRay = cornerRay * prevSplitDist;
        vec3 farCornerRay  = cornerRay * splitDist;

        frustumCornersWS[i + 4] = frustumCornersWS[i] + farCornerRay;
        frustumCornersWS[i + 0] = frustumCornersWS[i] + nearCornerRay;
    }

    // calculate center pos of view frustum.
    vec3 frustumCenter = vec3(0.0f);
    for(uint i = 0; i < 8; i ++)
    {
        frustumCenter += frustumCornersWS[i];
    }
    frustumCenter /= 8.0f;

    // get view sphere bounds radius.
    float sphereRadius = 0.0f;
    for(uint i = 0; i < 8; ++i)
    {
        float dist = length(frustumCornersWS[i] - frustumCenter);
        sphereRadius = max(sphereRadius, dist);
    }
    // round 16.
    sphereRadius = ceil(sphereRadius * 16.0f) / 16.0f;
    vec3 maxExtents = vec3(sphereRadius);
    vec3 minExtents = -maxExtents;
    vec3 cascadeExtents = maxExtents - minExtents;

    // create temporary view project matrix for cascade.
    vec3 upDir = vec3(0.f, 1.f, 0.f);
    vec3 shadowCameraPos = frustumCenter - normalize(frameData.directionalLightDir.xyz) * cascadeExtents.z * 0.5f;

    float nearZProj = 0.0f; 
    float farZProj  = cascadeExtents.z;     

    mat4 shadowView = lookAtRH(shadowCameraPos,frustumCenter,upDir);
    mat4 shadowProj = orthoRH_ZO(
        minExtents.x, 
        maxExtents.x, 
        minExtents.y, 
        maxExtents.y,
        farZProj, // also reverse z for shadow depth.
        nearZProj
    );

    // texel align.
    float sMapSize = float(pushConstant.perCascadeXYDim);
    mat4 shadowViewProjMatrix = shadowProj * shadowView;
    vec4 shadowOrigin = vec4(0.0f,0.0f,0.0f,1.0f);
    shadowOrigin = shadowViewProjMatrix * shadowOrigin;
    // move to center uv pos
    shadowOrigin *= (sMapSize / 2.0f); 
    vec3 roundedOrigin = round(shadowOrigin.xyz);
    vec3 roundOffset = roundedOrigin - shadowOrigin.xyz;
    roundOffset   = roundOffset * (2.0f / sMapSize);
    roundOffset.z = 0.0f;

    // pushback round offset data to project matrix.
    shadowProj[3][0] += roundOffset.x;
    shadowProj[3][1] += roundOffset.y;

    // final proj view matrix
    mat4 shadowFinalViewProj = shadowProj * shadowView;

    // push to buffer.
    cascadeInfos[idx].cascadeViewProjMatrix = shadowFinalViewProj;

    // build frustum plane.
    vec3 p[8];
    {
        p[0] = vec3(-1.0f,  1.0f, 1.0f);
        p[1] = vec3( 1.0f,  1.0f, 1.0f);
        p[2] = vec3( 1.0f, -1.0f, 1.0f);
        p[3] = vec3(-1.0f, -1.0f, 1.0f);
        p[4] = vec3(-1.0f,  1.0f, 0.0f);
        p[5] = vec3( 1.0f,  1.0f, 0.0f);
        p[6] = vec3( 1.0f, -1.0f, 0.0f);
        p[7] = vec3(-1.0f, -1.0f, 0.0f);

        mat4 reverseToWorld = inverse(shadowFinalViewProj);

        for(uint i = 0; i < 8; i++)
        {
            vec4 invCorner = reverseToWorld * vec4(p[i], 1.0f);
            p[i] = invCorner.xyz / invCorner.w;
        }

        // left
        vec3 leftN = normalize(cross((p[4] - p[7]), (p[3] - p[7])));
        cascadeInfos[idx].frustumPlanes[0] = vec4(leftN, -dot(leftN, p[7]));

        // down
        vec3 downN = normalize(cross((p[6] - p[2]), (p[3] - p[2])));
        cascadeInfos[idx].frustumPlanes[1] = vec4(downN, -dot(downN, p[2]));
        
        // right
        vec3 rightN = normalize(cross((p[6] - p[5]), (p[1] - p[5])));
        cascadeInfos[idx].frustumPlanes[2] = vec4(rightN, -dot(rightN, p[5]));
        
        // top
        vec3 topN = normalize(cross((p[5] - p[4]), (p[0] - p[4])));
        cascadeInfos[idx].frustumPlanes[3] = vec4(topN, -dot(topN, p[4]));

        // front
        vec3 frontN = normalize(cross((p[1] - p[0]), (p[3] - p[0])));
        cascadeInfos[idx].frustumPlanes[4] = vec4(frontN, -dot(frontN, p[0]));

        // back
        vec3 backN  = normalize(cross((p[5] - p[6]), (p[7] - p[6])));
        cascadeInfos[idx].frustumPlanes[5] = vec4(backN, -dot(frontN, p[6]));
    }
   
}