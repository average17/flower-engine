#version 460

// NOTE: We have hiz ready, so just use hiz value instead of this pass.

#define WORK_SIZE 8

// shared memory for evaluate compare.
shared vec2 depthContainer[WORK_SIZE * WORK_SIZE];

#include "SDSMCommon.glsl"

// dpeth use point sampler.
layout(set = 0, binding = 0) uniform sampler2D inDepth;

// out depth buffer infos.
layout(set = 1, binding = 0) writeonly buffer outDepthRangeBuffer
{
    DepthRange range;
};

layout(local_size_x = WORK_SIZE, local_size_y = WORK_SIZE) in;
void main()
{
    vec2 fragCoord  = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f);
    vec2 textureRes = vec2(textureSize(inDepth, 0));

    float u = clamp(fragCoord.x / textureRes.x, 0.0f, 1.0f);
    float v = clamp(fragCoord.y / textureRes.y, 0.0f, 1.0f);

    // clear buffer range for current frame.
    uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x;
    if(idx == 0)
    {
        // add additional 10u to ensure all depth will smaller than this gay.
        atomicExchange(range.minDepth, DEPTH_SCALE_UINT + 10u); 
        atomicExchange(range.maxDepth, 0);
    }

    groupMemoryBarrier();
    barrier();

    // flatten local invocation id.
    const uint linearId = gl_LocalInvocationID.y * WORK_SIZE + gl_LocalInvocationID.x;

    // prepare data.
    float sampleDepth = texture(inDepth, vec2(u,v)).r;

    // todo: use shading model id to ensure wether is sky.
    const float edgeFactor = 1e-5f;
    if(sampleDepth < edgeFactor || sampleDepth > 1.0f - edgeFactor)
    {
        depthContainer[linearId] = vec2(DEPTH_SCALE_FLOAT + 10.0f, 0.0f);
    }
    else
    {
        depthContainer[linearId] = vec2(sampleDepth);
    }

    // reduce.
    #define REDUCE_OP(XXYYQQ) \
        groupMemoryBarrier(); \
        barrier(); \
        if(linearId < XXYYQQ) \
        {\
            depthContainer[linearId].x = min(depthContainer[linearId].x, depthContainer[linearId + XXYYQQ].x);\
            depthContainer[linearId].y = max(depthContainer[linearId].y, depthContainer[linearId + XXYYQQ].y);\
        }

        REDUCE_OP(32)
        REDUCE_OP(16)
        REDUCE_OP(8)
        REDUCE_OP(4)
        REDUCE_OP(2)
    #undef REDUCE_OP

    groupMemoryBarrier();
    barrier();

    // final atomic compare to get min and max depth.
    if(linearId < 1)
    {
        float minDepthFloat = max(0.0f * DEPTH_SCALE_FLOAT, min(depthContainer[linearId].x, depthContainer[linearId + 1].x) * DEPTH_SCALE_FLOAT);
        float maxDepthFloat = min(1.0f * DEPTH_SCALE_FLOAT, max(depthContainer[linearId].y, depthContainer[linearId + 1].y) * DEPTH_SCALE_FLOAT);

        atomicMin(range.minDepth, uint(minDepthFloat));
        atomicMax(range.maxDepth, uint(maxDepthFloat));
    }
}