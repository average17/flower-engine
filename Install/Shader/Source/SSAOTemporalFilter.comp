#version 460

#define LOCAL_SIZE_XY 16
layout (local_size_x = LOCAL_SIZE_XY, local_size_y = LOCAL_SIZE_XY, local_size_z = 1) in;

#include "SSAOCommon.glsl"

const ivec2 kSampleOffset3x3[9] = 
{
    ivec2(-1.0, -1.0),
    ivec2( 0.0, -1.0),
    ivec2( 1.0, -1.0),
    ivec2(-1.0,  0.0),
    ivec2( 0.0,  0.0),
    ivec2( 1.0,  0.0),
    ivec2(-1.0,  1.0),
    ivec2( 0.0,  1.0),
    ivec2( 1.0,  1.0)
};

void TemporalResolveAABB
(
	sampler2D currColorTex,
	float aabbScale,
	vec2 uv,
	vec2 texelSize,
	inout vec2 minColor,
	inout vec2 maxColor,
	inout vec2 filterColor
)
{
	vec2 sampleColors[9];
	for (uint i = 0; i < 9; i++)
	{
		sampleColors[i] = texture(currColorTex, uv + (kSampleOffset3x3[i] * texelSize)).rg;
	}

	vec2 m1 = vec2(0.0);
	vec2 m2 = vec2(0.0);
	for (uint x = 0; x < 9; x++)
	{
		m1 += sampleColors[x];
		m2 += sampleColors[x] * sampleColors[x];
	}

	vec2 mean = m1 / 9.0;
	vec2 stddev = sqrt(max(vec2(0), (m2 / 9.0) - mean * mean));

	minColor = mean - aabbScale * stddev;
	maxColor = mean + aabbScale * stddev;

	filterColor = sampleColors[4];

	minColor = min(minColor, filterColor);
	maxColor = max(maxColor, filterColor);
}

// GTAO In, Temp out.
void main()
{
	ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    // fallback fill.
    ivec2 workSize = imageSize(GTAOTempFilter);
    imageStore(GTAOTempFilter, pixelPos, vec4(1.0));

    if(pixelPos.x >= workSize.x || pixelPos.y >= workSize.y)
    {
        return;
    }

    vec2 texelSize = 1.0f / vec2(workSize);
    vec2 uv        = (vec2(pixelPos) + vec2(0.5)) * texelSize; 

	if(pushConstant.aoCut < 0.5f)
    {
        imageStore(GTAOTempFilter, pixelPos, texelFetch(inGTAO, pixelPos, 0));
        return;
    }

	vec2 velocity = texture(inVelocity, uv).rg;

	// Get AABB ClipBox.
	vec2 currColor = vec2(0);
	vec2 minColor, maxColor;

	TemporalResolveAABB(
		inGTAO,
		kGTAOTemporalClampScale,
		uv,
		texelSize,
		minColor,
		maxColor,
		currColor
	);

	vec2 prevColor = texture(inGTAOTemporal, uv - velocity).rg;
	prevColor = clamp(prevColor, minColor, maxColor);

	float temporalBlendWeight = clamp(kGTAOTemporalWeight * (1 - length(velocity) * 8.0f), 0, 1);
	vec2 color = mix(currColor, prevColor, temporalBlendWeight);

	imageStore(GTAOTempFilter, pixelPos, vec4(color, 1,1));
}