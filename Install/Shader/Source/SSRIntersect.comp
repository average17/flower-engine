#version 460

#include "SSRCommon.glsl"

void HizIntersect()
{
    // clear.
    imageStore(SSRIntersect, ivec2(gl_GlobalInvocationID.xy), vec4(0));
    imageStore(SSRHitMask,   ivec2(gl_GlobalInvocationID.xy), vec4(0));

    // border check.
    if(gl_GlobalInvocationID.x >= pushConstant.dimXY.x || gl_GlobalInvocationID.y >= pushConstant.dimXY.y)
    {
        return;
    }

    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f)) / vec2(pushConstant.dimXY);
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    vec4 gbufferB = texelFetch(inGBufferB, pixelPos, 0);
    vec4 gbufferS = texelFetch(inGBufferS, pixelPos, 0);

    float shadingModel = gbufferB.w;
    if(!matchShadingModel(shadingModel, SHADING_MODEL_DisneyBRDF)) return;

    mat4 inverseProject = viewData.camProjJitterInverse;

    ivec2 screenSize = ivec2(pushConstant.dimXY.xy);
    int mostDetailedMip = 0;
    int maxTraceIteration = 128;

    const float thickness = pushConstant.thickness;
    const float roughness = gbufferS.g;

    if(roughness > pushConstant.maxRoughness) return;

    const bool bMirror = isMirrorReflection(roughness);

    float z = SSRLoadDepth(pixelPos, mostDetailedMip);
    vec3 screenUVSpaceRayOrigin = vec3(uv, z);

    // convert to view space pos and get view ray direction.
    vec3 viewSpaceRay = SSRInvProjectPosition(screenUVSpaceRayOrigin, inverseProject);
    vec3 viewSpaceRayDirection = normalize(viewSpaceRay);

    // get view space normal.
    vec3 viewSpaceSurfaceNormal = (viewData.camView * vec4(gbufferB.rgb, 0.0f)).xyz;

    // importance sample hiz trace.
    vec3 H = vec3(0.0);
    float pdf = 1.0f;

    // 1 ray blue noise.
    vec2 blueNoise = getBlueNoiseRandom1Spp(pixelPos);
    if (bMirror)
    {
        H = viewSpaceSurfaceNormal;
    }
    else
    {
        vec2 sampleHashv = blueNoise.xy; 
        sampleHashv.y = mix(sampleHashv.y, 0.0, 0.7f);

        // simple importance sample ggx.
        vec4 h4 = TangentToWorld(viewSpaceSurfaceNormal, ImportanceSampleGGX(sampleHashv, roughness));
        pdf = h4.w;
        H = h4.xyz;
    }
    vec3 viewSpaceReflectedDirection = reflect(viewSpaceRayDirection, H.xyz);
    vec3 viewSpaceRayEnd = viewSpaceRay + viewSpaceReflectedDirection;

    // FIXME: if reflection ray point out of screen, may cause ssr flickering.
    //        use sdf reflection can fix, current no sdf global reflection.

    vec3 screenUVSpaceRayEnd = SSRProjectPosition(viewSpaceRayEnd, viewData.camProjJitter);
    vec3 screenSpaceRayDirection = screenUVSpaceRayEnd - screenUVSpaceRayOrigin;

    bool bValidHit = false;
    vec3 hit = SSRHizTrace(screenUVSpaceRayOrigin, screenSpaceRayDirection, screenSize, mostDetailedMip, maxTraceIteration, bValidHit);

    float hitMask = 0.0f;
    float worldRayLength = 0.0f; 
    if(bValidHit)
    {
        vec3 worldSpaceOrigin = SSRInvProjectPosition(screenUVSpaceRayOrigin, viewData.camInvertViewProjectionJitter);
        vec3 worldSpaceHit    = SSRInvProjectPosition(hit, viewData.camInvertViewProjectionJitter);
        vec3 worldSpaceRay    = worldSpaceHit - worldSpaceOrigin;

        hitMask = SSRValidateHit(hit, uv, worldSpaceRay, screenSize, thickness, roughness);
        worldRayLength = max(0, length(worldSpaceRay));
    }
    
    imageStore(SSRIntersect, ivec2(gl_GlobalInvocationID.xy), vec4(hit, pdf));
    imageStore(SSRHitMask, ivec2(gl_GlobalInvocationID.xy), vec4(hitMask));
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    HizIntersect();
}