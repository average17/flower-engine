#version 460

#include "SSRCommon.glsl"

const ivec2 kSampleOffset3x3[9] = 
{
    ivec2(-1.0, -1.0),
    ivec2( 0.0, -1.0),
    ivec2( 1.0, -1.0),
    ivec2(-1.0,  0.0),
    ivec2( 0.0,  0.0),
    ivec2( 1.0,  0.0),
    ivec2(-1.0,  1.0),
    ivec2( 0.0,  1.0),
    ivec2( 1.0,  1.0)
};

// simple aabb clamp temporal.
void prepareAABB
(
	float AABBScale,
	vec2 uv,
	vec2 screenSize,
	inout vec4 minColor,
	inout vec4 maxColor,
	inout vec4 filterColor
)
{
	vec4 sampleColors[9];

    // should we change to lds?
	for (uint i = 0; i < 9; i++)
	{
		sampleColors[i] = texture(inSSRReflection, uv + (kSampleOffset3x3[i] / screenSize));
	}

	vec4 m1 = vec4(0.0);
	vec4 m2 = vec4(0.0);
	for (uint x = 0; x < 9; x++)
	{
		m1 += sampleColors[x];
		m2 += sampleColors[x] * sampleColors[x];
	}

	vec4 mean = m1 / 9.0;
	vec4 stddev = sqrt(max(vec4(0), (m2 / 9.0) - mean * mean));

	minColor = mean - AABBScale * stddev;
	maxColor = mean + AABBScale * stddev;

	filterColor = sampleColors[4];
	minColor = min(minColor, filterColor);
	maxColor = max(maxColor, filterColor);
}

void TemporalFilter()
{
    imageStore(outTemporalFilter, ivec2(gl_GlobalInvocationID.xy), vec4(0));
    // border check.
    if(gl_GlobalInvocationID.x >= pushConstant.dimXY.x || gl_GlobalInvocationID.y >= pushConstant.dimXY.y)
    {
        return;
    }

    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f)) / vec2(pushConstant.dimXY);
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 texelSize = 1.0f / vec2(pushConstant.dimXY);

    vec4 gbufferB = texelFetch(inGBufferB, pixelPos, 0);
    vec4 gbufferS = texelFetch(inGBufferS, pixelPos, 0);

    // skip sky background.
    float shadingModel = gbufferB.w;
    if(!matchShadingModel(shadingModel, SHADING_MODEL_DisneyBRDF)) return;

    if(pushConstant.cut < 0.5f)
    {
        imageStore(outTemporalFilter, ivec2(gl_GlobalInvocationID.xy), texture(inSSRReflection, uv));
        return;
    }

    // temporal filter
    vec3 worldNormal = gbufferB.rgb;

    vec2 velocity = vec2(0);
    vec4 hitPack = texture(inSSRIntersect, uv);
    vec2 hitUV = hitPack.xy;
    float hitDepth = hitPack.z;
    velocity = getMotionVector(hitDepth, uv);

	vec4 currColor = vec4(0);
    
	vec4  minColor = vec4(99999999.0f);
    vec4  maxColor = -minColor;

    float velocityLen = length(velocity);

    const float temporalClampScale = pushConstant.temporalClampScale;
    const float temporalWeight = pushConstant.temporalWeight;

    prepareAABB(
		temporalClampScale,
		uv,
		pushConstant.dimXY.xy,
		minColor,
		maxColor,
		currColor
	);

    // clamp.
	vec4 prevColor = texture(inSSRReflectionPrev, uv - velocity);
	prevColor = clamp(prevColor, minColor, maxColor);

	// combine.
	float temporalBlendWeight = clamp(temporalWeight * (1 - velocityLen * 8.0f), 0.0f, 1.0f);
	vec4 color = mix(currColor, prevColor, temporalBlendWeight);
    
    // store.
    imageStore(outTemporalFilter, ivec2(gl_GlobalInvocationID.xy), color);
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    TemporalFilter();
}