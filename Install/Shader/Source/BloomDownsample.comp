#version 460

#include "BloomCommon.glsl"

struct PushConstantData
{
    vec4 u_prefilter;
    vec2   u_invSize;
    uvec2     u_size;
    int   u_mipLevel;
};

layout(push_constant) uniform block
{
	PushConstantData pushConstant;
};

layout (constant_id = 0) const int NumMipLevels = 1;
layout (set = 0, binding = 0, rgba16f) uniform image2D outColor;
layout (set = 1, binding = 0) uniform sampler2D inputSampler;

vec2 offsets[9] = 
{ 
    vec2( 1, 1), vec2( 0, 1), vec2(-1, 1), 
    vec2( 1, 0), vec2( 0, 0), vec2(-1, 0), 
    vec2( 1,-1), vec2( 0,-1), vec2(-1,-1)
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec3 prefilter(vec3 c) 
{
    float brightness = max(c.r, max(c.g, c.b));

    float soft = brightness - pushConstant.u_prefilter.y;
          soft = clamp(soft, 0, pushConstant.u_prefilter.z);
          soft = soft * soft * pushConstant.u_prefilter.w;

    float contribution = max(soft, brightness - pushConstant.u_prefilter.x);
    contribution /= max(brightness, 0.00001);

    return c * contribution;
}

void main()
{
    if(gl_GlobalInvocationID.x >= pushConstant.u_size.x || gl_GlobalInvocationID.y >= pushConstant.u_size.y)
    {
        return;
    }

    uvec2 pos = gl_GlobalInvocationID.xy;
    vec2 uv = (vec2(pos) + vec2(0.5)) * pushConstant.u_invSize;

    ivec2 inputDims = textureSize(inputSampler, 0).xy;
    const vec2 inputTexelSize = 1.0f / vec2(inputDims.xy);

    vec4 color = vec4(0,0,0,0);

    vec4 OutColorF;
    float allSW = 0.0f;
    
    if (pushConstant.u_mipLevel == 0) 
    {
        for(int i = 0; i < 9; i++)
        {
            vec4 sampleColor = max(.01 + texture(inputSampler, uv + (2 * inputTexelSize * offsets[i])), vec4(0.01, 0.01, 0.01, 0.01));

        #ifndef ALL_BLOOM
            // NOTE: basic bloom don't need prefilter.
            //       we use secondary bloom for stylized.
            sampleColor.xyz = prefilter(sampleColor.xyz);
        #endif
        
            color += log(sampleColor);
        }
        OutColorF = exp(color / 9.0f);
    }
    else 
    {
        for(int i = 0; i < 9; i++)
        {
            vec4 rawColor = texture(inputSampler, uv + (2 * inputTexelSize * offsets[i]));
            float sw = 1.0f;
            color += rawColor * sw;
        }

        OutColorF = color / 9.0f;
    }
    imageStore(outColor, ivec2(gl_GlobalInvocationID.xy), OutColorF);
}