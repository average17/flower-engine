#version 460

#include "AtmosphereCommon.glsl"
#include "Common.glsl"

void main()
{
    // skip non-sky pixels.
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 workSize = imageSize(outHdrColor);
    if(pixelPos.x >= workSize.x || pixelPos.y >= workSize.y)
    {
        return;
    }

    vec2 texelSize = 1.0f / vec2(workSize);
    vec2 uv        = (vec2(pixelPos) + vec2(0.5)) * texelSize; 

    // area perspective area.
    float sampleDeviceZ = texture(inDepth, uv).r;
    vec4 posClip  = vec4(uv.x * 2.0f - 1.0f, 1.0f - uv.y * 2.0f, sampleDeviceZ, 1.0f);
    vec4 posWorldRebuild = viewData.camInvertViewProjectionJitter * posClip;

    // get world pos, in game unit.
    vec3 worldPos = posWorldRebuild.xyz / posWorldRebuild.w;
    vec3 rayDir  = normalize(worldPos - viewData.camWorldPos.xyz);

    bool bIsSky = sampleDeviceZ < BG_DEPTH;
    if(bIsSky)
    {
        vec3 sunDir = getSunDir();
        
        // view pos already fit to planet unit.
        vec3 viewPos = getViewPos();
        
        // when camera move outside of the atmosphere, we need to calculate scattering.
        // sky lut fail here.
        vec3 lum;

        // when view is very height, sky view lut resolution is no enough, so switch to realtime compute.
        // offset 60 km.
        const float distanceT = pushConstant.atmosphereRadiusMM - 60000 * 0.001f * 0.001f;
        if (length(viewPos) < distanceT)
        {
            lum = getValFromSkyLUT(inSkyLut, rayDir, sunDir);
        } 
        else 
        {
            // slightly slow here.
            vec3 transTemp;
            float atmoDist = rayIntersectSphere(viewPos, rayDir, pushConstant.atmosphereRadiusMM);
            float groundDist = rayIntersectSphere(viewPos, rayDir, pushConstant.groundRadiusMM);
            float tMax = (groundDist < 0.0) ? atmoDist : groundDist;

            vec3 ts;
            lum = raymarchScattering(viewPos, rayDir, sunDir, tMax, float(numScatteringSteps), ts);
        }

        vec3 sunLum = drawSun(rayDir, sunDir);
        {
            // Use smoothstep to limit the effect, so it drops off to actual zero.
            sunLum = smoothstep(0.002, 1.0, sunLum);
            if (length(sunLum) > 0.0) 
            {
                if (rayIntersectSphere(viewPos, rayDir, pushConstant.groundRadiusMM) >= 0.0) 
                {
                    sunLum *= 0.0;
                } 
                else 
                {
                    // If the sun value is applied to this pixel, we need to calculate the transmittance to obscure it.
                    sunLum *= getValFromTLUT(inTransmittanceLut, viewPos, sunDir);
                }
            }

            lum += sunLum;
        }

        float exposure = pushConstant.atmosphereExposure;

        // mul white point here, it beautiful when sun down.
        lum = lum * kWhitePoint * exposure;

        // lum = pow(vec3(1.0) - exp(-lum), vec3(1.0 / 2.2));
        // lum = pow(lum / (lum + 1.0f), vec3(1.0 / 2.2));

        // NOTE: epic sebh's atmosphere model transmittance base on Bruneton08.
        //       it need to do a reverse gamma to ensure final color is linear space.

        // on sebh's example project, he just all sample in gamma space, final tonemapper do a final gamma correct.
        // if don't do this process, atmosphere result will very ugly.
        lum = pow(lum, vec3(1.0f / 2.2f));

        imageStore(outHdrColor, pixelPos, vec4(lum, 1.0f));
    }
}